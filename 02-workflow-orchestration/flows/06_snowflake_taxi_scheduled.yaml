id: 05_snowflake_taxi
namespace: zoomcamp
description: |
  The CSV Data used in the course: https://github.com/DataTalksClub/nyc-tlc-data/releases

inputs:
  - id: taxi
    type: SELECT
    displayName: Select taxi type
    values: ['yellow', 'green']
    defaults: 'yellow'

  - id: year
    type: SELECT
    displayName: Select Year
    values: ["2019", "2020"]
    defaults: '2019'

  - id: month
    type: SELECT
    displayName: Select Month
    values: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"]
    defaults: "01"

variables:
  file: "{{inputs.taxi}}_tripdata_{{inputs.year}}-{{inputs.month}}.csv"
  staging_table: "ZOOMCAMP_DB.ZOOMCAMP_SCHEMA.{{inputs.taxi}}_tripdata_staging"
  table: "ZOOMCAMP_DB.ZOOMCAMP_SCHEMA.{{inputs.taxi}}_tripdata"
  final_table: "{{inputs.taxi}}_tripdata"
  data: "{{outputs.extract.outputFiles[inputs.taxi ~ '_tripdata_' ~ inputs.year ~ '-' ~ inputs.month ~ '.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      taxi: "{{inputs.taxi}}"

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{{inputs.taxi}}/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}

  - id: upload_to_stage
    type: io.kestra.plugin.jdbc.snowflake.Upload
    from: "{{render(vars.data)}}"
    stageName: "@TAXI_TRIPDATA_STAGING"
    prefix: ""
    fileName: "{{render(vars.file)}}"

  - id: if_yellow_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'yellow'}}"
    then:
    - id: sf_yellow_tripdata
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        CREATE TABLE IF NOT EXISTS "ZOOMCAMP_DB"."ZOOMCAMP_SCHEMA"."{{render(vars.final_table)}}_taxi" (
            unique_row_id STRING COMMENT 'A unique identifier for the trip, generated by hashing key trip attributes.',
            filename STRING COMMENT 'The source filename from which the trip data was loaded.',      
            VendorID STRING COMMENT 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.',
            tpep_pickup_datetime TIMESTAMP COMMENT 'The date and time when the meter was engaged',
            tpep_dropoff_datetime TIMESTAMP COMMENT 'The date and time when the meter was disengaged',
            passenger_count INTEGER COMMENT 'The number of passengers in the vehicle. This is a driver-entered value.',
            trip_distance NUMERIC COMMENT 'The elapsed trip distance in miles reported by the taximeter.',
            RatecodeID STRING COMMENT 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride',
            store_and_fwd_flag STRING COMMENT 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip',
            PULocationID STRING COMMENT 'TLC Taxi Zone in which the taximeter was engaged',
            DOLocationID STRING COMMENT 'TLC Taxi Zone in which the taximeter was disengaged',
            payment_type INTEGER COMMENT 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip',
            fare_amount NUMERIC COMMENT 'The time-and-distance fare calculated by the meter',
            extra NUMERIC COMMENT 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges',
            mta_tax NUMERIC COMMENT '$0.50 MTA tax that is automatically triggered based on the metered rate in use',
            tip_amount NUMERIC COMMENT 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.',
            tolls_amount NUMERIC COMMENT 'Total amount of all tolls paid in trip.',
            improvement_surcharge NUMERIC COMMENT '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.',
            total_amount NUMERIC COMMENT 'The total amount charged to passengers. Does not include cash tips.',
            congestion_surcharge NUMERIC COMMENT 'Congestion surcharge applied to trips in congested zones'
        )
        CLUSTER BY (DATE(tpep_pickup_datetime))

    - id: create_yellow_table
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        CREATE TABLE IF NOT EXISTS ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}_ext" (
          VendorID STRING,
          tpep_pickup_datetime TIMESTAMP,
          tpep_dropoff_datetime TIMESTAMP,
          passenger_count INTEGER,
          trip_distance NUMERIC,
          RatecodeID STRING,
          store_and_fwd_flag STRING,
          PULocationID STRING,
          DOLocationID STRING,
          payment_type INTEGER,
          fare_amount NUMERIC,
          extra NUMERIC,
          mta_tax NUMERIC,
          tip_amount NUMERIC,
          tolls_amount NUMERIC,
          improvement_surcharge NUMERIC,
          total_amount NUMERIC,
          congestion_surcharge NUMERIC
        );

    - id: copy_yellow_data
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        COPY INTO ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}_ext"
        FROM @ZOOMCAMP_DB.ZOOMCAMP_SCHEMA.TAXI_TRIPDATA_STAGING
        FILE_FORMAT = (
          TYPE = 'CSV',
          FIELD_OPTIONALLY_ENCLOSED_BY = '"',
          SKIP_HEADER = 1
        )
        PATTERN = '.*{{render(vars.file)}}'
        VALIDATION_MODE = RETURN_ERRORS;

    - id: sf_yellow_table_tmp
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        CREATE OR REPLACE TABLE ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}"
        AS
          SELECT
            SHA1(
            COALESCE(TO_VARCHAR(VendorID), '') ||
            COALESCE(TO_VARCHAR(tpep_pickup_datetime), '') ||
            COALESCE(TO_VARCHAR(tpep_dropoff_datetime), '') ||
            COALESCE(TO_VARCHAR(PULocationID), '') ||
            COALESCE(TO_VARCHAR(DOLocationID), '')
          ) AS unique_row_id,
          '{{render(vars.file)}}' AS filename,
          *
          FROM ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}_ext"

    - id: sf_yellow_merge
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        MERGE INTO "ZOOMCAMP_DB"."ZOOMCAMP_SCHEMA"."{{render(vars.final_table)}}_taxi" T
        USING ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}" S
        ON T.unique_row_id = S.unique_row_id AND T.filename = S.filename
        WHEN NOT MATCHED THEN
          INSERT (
            unique_row_id, filename, VendorID, tpep_pickup_datetime, tpep_dropoff_datetime, passenger_count, trip_distance, RatecodeID, store_and_fwd_flag, PULocationID, DOLocationID, payment_type, fare_amount, extra, mta_tax, tip_amount, tolls_amount, improvement_surcharge, total_amount, congestion_surcharge
          )
          VALUES (
            S.unique_row_id, S.filename, S.VendorID, S.tpep_pickup_datetime, S.tpep_dropoff_datetime, S.passenger_count, S.trip_distance, S.RatecodeID, S.store_and_fwd_flag, S.PULocationID, S.DOLocationID, S.payment_type, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.improvement_surcharge, S.total_amount, S.congestion_surcharge
          );


  - id: if_green_taxi
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.taxi == 'green'}}"
    then:
    - id: sf_green_tripdata
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        CREATE TABLE IF NOT EXISTS "ZOOMCAMP_DB"."ZOOMCAMP_SCHEMA"."{{render(vars.final_table)}}_taxi" (
            unique_row_id STRING COMMENT 'A unique identifier for the trip, generated by hashing key trip attributes.',
            filename STRING COMMENT 'The source filename from which the trip data was loaded.',      
            VendorID STRING COMMENT 'A code indicating the LPEP provider that provided the record. 1= Creative Mobile Technologies, LLC; 2= VeriFone Inc.',
            lpep_pickup_datetime TIMESTAMP COMMENT 'The date and time when the meter was engaged',
            lpep_dropoff_datetime TIMESTAMP COMMENT 'The date and time when the meter was disengaged',
            store_and_fwd_flag STRING COMMENT 'This flag indicates whether the trip record was held in vehicle memory before sending to the vendor, aka "store and forward," because the vehicle did not have a connection to the server. Y= store and forward trip N= not a store and forward trip',
            RatecodeID STRING COMMENT 'The final rate code in effect at the end of the trip. 1= Standard rate 2=JFK 3=Newark 4=Nassau or Westchester 5=Negotiated fare 6=Group ride',
            PULocationID STRING COMMENT 'TLC Taxi Zone in which the taximeter was engaged',
            DOLocationID STRING COMMENT 'TLC Taxi Zone in which the taximeter was disengaged',
            passenger_count INTEGER COMMENT 'The number of passengers in the vehicle. This is a driver-entered value.',
            trip_distance NUMERIC COMMENT 'The elapsed trip distance in miles reported by the taximeter.',
            fare_amount NUMERIC COMMENT 'The time-and-distance fare calculated by the meter',
            extra NUMERIC COMMENT 'Miscellaneous extras and surcharges. Currently, this only includes the $0.50 and $1 rush hour and overnight charges',
            mta_tax NUMERIC COMMENT '$0.50 MTA tax that is automatically triggered based on the metered rate in use',
            tip_amount NUMERIC COMMENT 'Tip amount. This field is automatically populated for credit card tips. Cash tips are not included.',
            tolls_amount NUMERIC COMMENT 'Total amount of all tolls paid in trip.',
            ehail_fee NUMERIC,
            improvement_surcharge NUMERIC COMMENT '$0.30 improvement surcharge assessed on hailed trips at the flag drop. The improvement surcharge began being levied in 2015.',
            total_amount NUMERIC COMMENT 'The total amount charged to passengers. Does not include cash tips.',
            payment_type INTEGER COMMENT 'A numeric code signifying how the passenger paid for the trip. 1= Credit card 2= Cash 3= No charge 4= Dispute 5= Unknown 6= Voided trip',
            trip_type STRING COMMENT 'A code indicating whether the trip was a street-hail or a dispatch that is automatically assigned based on the metered rate in use but can be altered by the driver. 1= Street-hail 2= Dispatch',
            congestion_surcharge NUMERIC COMMENT 'Congestion surcharge applied to trips in congested zones'
        )
        CLUSTER BY (DATE(lpep_pickup_datetime))

    - id: create_green_table
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        CREATE TABLE IF NOT EXISTS ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}_ext" (
          VendorID STRING,
          lpep_pickup_datetime TIMESTAMP,
          lpep_dropoff_datetime TIMESTAMP,
          store_and_fwd_flag STRING,
          RatecodeID STRING,
          PULocationID STRING,
          DOLocationID STRING,
          passenger_count INTEGER,
          trip_distance NUMERIC,
          fare_amount NUMERIC,
          extra NUMERIC,
          mta_tax NUMERIC,
          tip_amount NUMERIC,
          tolls_amount NUMERIC,
          ehail_fee NUMERIC,
          improvement_surcharge NUMERIC,
          total_amount NUMERIC,
          payment_type INTEGER,
          trip_type STRING,
          congestion_surcharge NUMERIC
        );

    - id: copy_green_data
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        COPY INTO ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}_ext"
        FROM @ZOOMCAMP_DB.ZOOMCAMP_SCHEMA.TAXI_TRIPDATA_STAGING
        FILE_FORMAT = (
          TYPE = 'CSV',
          FIELD_OPTIONALLY_ENCLOSED_BY = '"',
          SKIP_HEADER = 1
        )
        PATTERN = '.*{{render(vars.file)}}';

    - id: sf_green_table_tmp
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        CREATE OR REPLACE TABLE ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}"
        AS
          SELECT
            SHA1(
            COALESCE(TO_VARCHAR(VendorID), '') ||
            COALESCE(TO_VARCHAR(lpep_pickup_datetime), '') ||
            COALESCE(TO_VARCHAR(lpep_dropoff_datetime), '') ||
            COALESCE(TO_VARCHAR(PULocationID), '') ||
            COALESCE(TO_VARCHAR(DOLocationID), '')
          ) AS unique_row_id,
          '{{render(vars.file)}}' AS filename,
          *
          FROM ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}_ext"

    - id: sf_green_merge
      type: io.kestra.plugin.jdbc.snowflake.Query
      sql: |
        MERGE INTO "ZOOMCAMP_DB"."ZOOMCAMP_SCHEMA"."{{render(vars.final_table)}}_taxi" T
        USING ZOOMCAMP_DB.ZOOMCAMP_SCHEMA."{{render(vars.final_table)}}" S
        ON T.unique_row_id = S.unique_row_id AND T.filename = S.filename
        WHEN NOT MATCHED THEN
              INSERT (unique_row_id, filename, VendorID, lpep_pickup_datetime, lpep_dropoff_datetime, store_and_fwd_flag, RatecodeID, PULocationID, DOLocationID, passenger_count, trip_distance, fare_amount, extra, mta_tax, tip_amount, tolls_amount, ehail_fee, improvement_surcharge, total_amount, payment_type, trip_type, congestion_surcharge)
              VALUES (S.unique_row_id, S.filename, S.VendorID, S.lpep_pickup_datetime, S.lpep_dropoff_datetime, S.store_and_fwd_flag, S.RatecodeID, S.PULocationID, S.DOLocationID, S.passenger_count, S.trip_distance, S.fare_amount, S.extra, S.mta_tax, S.tip_amount, S.tolls_amount, S.ehail_fee, S.improvement_surcharge, S.total_amount, S.payment_type, S.trip_type, S.congestion_surcharge);

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: If you'd like to explore Kestra outputs, disable it.
    disabled: false

pluginDefaults:
  - type: io.kestra.plugin.jdbc.snowflake
    values:
      url: jdbc:snowflake://zz10671.ap-southeast-3.aws.snowflakecomputing.com/?warehouse=COMPUTE_WH&db=ZOOMCAMP_DB&schema=ZOOMCAMP_SCHEMA
      username: *****
      password: *****

triggers:
  - id: green_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 9 1 * *"
    inputs:
      taxi: green

  - id: yellow_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 10 1 * *"
    inputs:
      taxi: yellow